package cmd

import (
	"context"
	"github.com/spf13/cobra"
	"github.com/vearne/chat/config"
	zlog "github.com/vearne/chat/log"
	pb "github.com/vearne/chat/proto"
	"github.com/vearne/chat/resource"
	"go.uber.org/zap"
	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
	"net"
)

var brokerCmd = &cobra.Command{
	Use:   "broker",
	Short: "broker",
	Long:  "broker",
	Run:   RunBroker,
}

var (
	logicClient pb.LogicDealerClient
)

func init() {
	rootCmd.AddCommand(brokerCmd)

}

func RunBroker(cmd *cobra.Command, args []string) {
	// init resource
	initLogicClient()
	resource.InitBrokerResource()

	// starting ...
	zlog.Info("broker running...")
	lis, err := net.Listen("tcp", config.GetOpts().Broker.ListenAddress)
	if err != nil {
		zlog.Fatal("failed to listen", zap.Error(err))
	}
	s := grpc.NewServer()
	pb.RegisterBrokerServer(s, &Broker{})
	// Register reflection service on gRPC server.
	reflection.Register(s)
	if err := s.Serve(lis); err != nil {
		zlog.Fatal("failed to serve", zap.Error(err))
	}

}

func initLogicClient() {
	// logicClient
	conn, err := grpc.Dial(config.GetOpts().LogicDealer.ListenAddress, grpc.WithInsecure())
	if err != nil {
		zlog.Fatal("con't connect to logic")
	}
	defer conn.Close()
	logicClient = pb.NewLogicDealerClient(conn)
}

//type BrokerServer interface {
//	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
//	Match(context.Context, *MatchRequest) (*MatchResponse, error)
//	SendMsg(context.Context, *SendMsgRequest) (*SendMsgResponse, error)
//	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
//	// 给客户端推送数据的双向流
//	PushMsgDialogue(Broker_PushMsgDialogueServer) error
//	PushMsgSignal(Broker_PushMsgSignalServer) error
//}

type Broker struct{}

func (s *Broker) CreateAccount(ctx context.Context,
	in *pb.CreateAccountRequest) (*pb.CreateAccountResponse, error) {
	return logicClient.CreateAccount(context.Background(), in)
}

func (s *Broker) Match(ctx context.Context, in *pb.MatchRequest) (*pb.MatchResponse, error) {
	return logicClient.Match(context.Background(), in)
}

func (s *Broker) SendMsg(ctx context.Context, in *pb.SendMsgRequest) (*pb.SendMsgResponse, error) {
	return logicClient.SendMsg(context.Background(), in)
}

func (s *Broker) Logout(ctx context.Context,
	in *pb.LogoutRequest) (*pb.LogoutResponse, error) {
	return logicClient.Logout(context.Background(), in)
}

func (s *Broker) PushMsgDialogue(in *pb.PushRequest, stream pb.Broker_PushMsgDialogueServer) error {
	// 有并发风险
	if _, ok := resource.CientDiaChanMap[in.AccountId]; !ok {
		resource.CientDiaChanMap[in.AccountId] = make(chan *pb.PushDialogue, 50)
	}
	channel := resource.CientDiaChanMap[in.AccountId]
	for msg := range channel {
		stream.Send(msg)
	}
	return nil
}

func (s *Broker) PushMsgSignal(in *pb.PushRequest, stream pb.Broker_PushMsgSignalServer) error {
	// 有并发风险
	if _, ok := resource.CientSigChanMap[in.AccountId]; !ok {
		resource.CientSigChanMap[in.AccountId] = make(chan *pb.PushSignal, 50)
	}
	channel := resource.CientSigChanMap[in.AccountId]
	for msg := range channel {
		stream.Send(msg)
	}
	return nil
}

// 接收logic推送过来的数据
func (s *Broker) ReceiveMsgDialogue(ctx context.Context, in *pb.PushDialogue) (*pb.PushResp, error) {
	if _, ok := resource.CientDiaChanMap[in.ReceiverId]; !ok {
		resource.CientDiaChanMap[in.ReceiverId] = make(chan *pb.PushDialogue, 50)
	}

	resource.CientDiaChanMap[in.ReceiverId] <- in
	return &pb.PushResp{Code: pb.CodeEnum_C000}, nil
}

func (s *Broker) ReceiveMsgSignal(ctx context.Context, in *pb.PushSignal) (*pb.PushResp, error) {
	if _, ok := resource.CientSigChanMap[in.ReceiverId]; !ok {
		resource.CientSigChanMap[in.ReceiverId] = make(chan *pb.PushSignal, 50)
	}

	resource.CientSigChanMap[in.ReceiverId] <- in
	return &pb.PushResp{Code: pb.CodeEnum_C000}, nil
}
